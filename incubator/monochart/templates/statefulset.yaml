{{- if .Values.statefulset.enabled -}}
kind: StatefulSet
apiVersion: apps/v1beta1
metadata:
  name: {{ include "common.fullname" . }}
{{- with .Values.statefulset.annotations }}
  annotations:
{{ toYaml . | indent 4 }}
{{- end }}
  labels:
{{ include "common.labels.standard" . | indent 4 }}
spec:
  serviceName: {{ include "common.fullname" . }}
  replicas: 1
{{- with .Values.statefulset.strategy }}
  updateStrategy:
{{ toYaml . | indent 4 }}
{{- end }}
  revisionHistoryLimit: {{ .Values.statefulset.revisionHistoryLimit }}
  template:
    metadata:
      name: {{ include "common.fullname" . }}
{{- with .Values.statefulset.pod.annotations }}
      annotations:
{{ toYaml . | indent 8 }}
{{- end }}
      labels:
        app: {{ template "common.name" . }}
        release: {{ .Release.Name | quote }}
    spec:
      terminationGracePeriodSeconds: 0
      containers:
      - name: {{ .Chart.Name }}
        image: {{ required "image.repository is required!" .Values.image.repository }}:{{ required "image.tag is required!" .Values.image.tag }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        envFrom:
        - configMapRef:
            name: {{ include "common.fullname" . }}
        env:
{{- range $name, $value := .Values.env.open }}
{{- if not (empty $value) }}
        - name: {{ $name | quote }}
          value: {{ $value | quote }}
{{- end }}
{{- end }}

{{- $config_name := include "common.fullname" . }}
{{- range $name, $value := .Values.env.open }}
{{- if not ( empty $value) }}
        - name: {{ $name | quote }}
          valueFrom:
            configMapKeyRef:
              name: {{ $config_name }}
              key: {{ $name | quote }}
{{- end }}
{{- end }}

{{- $secret_name := include "common.fullname" . }}
{{- range $name, $value := .Values.env.secret }}
{{- if not ( empty $value) }}
        - name: {{ $name | quote }}
          valueFrom:
            secretKeyRef:
              name: {{ $secret_name }}
              key: {{ $name | quote }}
{{- end }}
{{- end }}

        args: {}
        ports:
          - name: http
            containerPort: 8080
            protocol: TCP
        volumeMounts:
        - mountPath: /data
          name: storage
        - mountPath: /config
          name: config
        - mountPath: /secret
          name: secret
          readOnly: true
{{- with .Values.probes }}
{{ toYaml . | indent 10 }}
{{- end }}
{{- with .Values.resources }}
          resources:
{{ toYaml . | indent 12 }}
{{- end }}
{{- with .Values.image.pullSecrets }}
      imagePullSecrets:
      {{- range . }}
        - name: {{ . }}
      {{- end }}
{{- end }}
      volumes:
      - name: storage
      {{- if .Values.persistence.enabled }}
        persistentVolumeClaim:
          claimName: {{ .Values.persistence.existingClaim | default (include "common.fullname" .) }}
      {{- else }}
        emptyDir: {}
      {{- end }}
      {{- if .Values.configMap.enabled }}
      - name: configMap
        configMap:
          name: {{ include "common.fullname" . }}
      {{- end }}
      {{- if .Values.secret.enabled }}
      - name: secret
        secret:
          secretName: {{ include "common.fullname" . }}
      {{- end }}
{{- end -}}
